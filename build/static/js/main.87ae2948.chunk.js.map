{"version":3,"sources":["components/ScrollLoader/index.js","components/PhotoLoader/PhotoView.js","components/PhotoLoader/index.js","App.js","index.js"],"names":["ScrollLoader","props","createObserver","options","root","containerEl","rootMargin","threshold","IntersectionObserver","handleIntersect","observe","loaderEl","current","entries","isLoading","hasMoreData","forEach","entry","intersectionRatio","prevRatio","onLoad","React","createRef","this","ref","Component","PhotoView","style","marginBottom","photo","title","loading","maxWidth","src","url","alt","PhotoLoader","getphotos","page","state","setState","axios","then","res","photos","data","catch","err","paddingBottom","map","id","App","width","margin","fontFamily","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NA6CeA,E,kDA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,eAAiB,WACf,IACMC,EAAU,CACdC,KAAM,EAAKH,MAAMI,aAAe,KAChCC,WAAY,MACZC,UAAW,GAGF,IAAIC,qBAAqB,EAAKC,gBAAiBN,GACjDO,QAAQ,EAAKC,SAASC,UAnBd,EAsBnBH,gBAAkB,SAACI,IAGb,EAAKZ,MAAMa,WAAc,EAAKb,MAAMc,aAGxCF,EAAQG,SAAQ,SAACC,GACXA,EAAMC,kBAAoB,EAAKC,WAEjC,EAAKlB,MAAMmB,SAEb,EAAKD,UAAYF,EAAMC,sBA/BzB,EAAKP,SAAWU,IAAMC,YACtB,EAAKH,UAAY,EAHA,E,qDAMnB,WACEI,KAAKrB,mB,oBA8BP,WACE,OAAO,qBAAKsB,IAAKD,KAAKZ,e,GAvCCc,a,iBCaZC,MAbf,SAAmBzB,GACjB,OACE,sBAAK0B,MAAO,CAAEC,aAAc,QAA5B,UACE,6BAAK3B,EAAM4B,MAAMC,QACjB,qBACEC,QAAQ,OACRJ,MAAO,CAAEK,SAAU,QACnBC,IAAKhC,EAAM4B,MAAMK,IACjBC,IAAI,aC4CGC,E,kDAjDb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAYRoC,UAAY,WACV,IAAMC,EAAO,EAAKC,MAAMD,KACxB,EAAKE,SAAS,CAAE1B,WAAW,IAC3B2B,IAAM,+DAAD,OAAgEH,IAClEI,MAAK,SAACC,GACL,EAAKH,SAAS,CACZ1B,WAAW,EACX8B,OAAO,GAAD,mBAAM,EAAKL,MAAMK,QAAjB,YAA4BD,EAAIE,OACtCP,KAAMA,EAAO,OAGhBQ,OAAM,SAACC,GACN,EAAKP,SAAS,CACZ1B,WAAW,QAxBjB,EAAKyB,MAAQ,CACXzB,WAAW,EACXwB,KAAM,EACNM,OAAQ,IALO,E,qDASnB,WACErB,KAAKc,c,oBAqBP,WACE,MAA8Bd,KAAKgB,MAA3BzB,EAAR,EAAQA,UAAW8B,EAAnB,EAAmBA,OAEnB,OACE,sBAAKjB,MAAO,CAAEqB,cAAe,QAA7B,UACGJ,EAAOK,KAAI,SAACpB,GAAD,OACV,cAAC,EAAD,CAA0BA,MAAOA,GAAjBA,EAAMqB,OAEvBpC,EAAY,4CAAsB,KACnC,cAAC,EAAD,CACEA,UAAWS,KAAKgB,MAAMzB,UACtBM,OAAQG,KAAKc,UACbtB,aAAa,W,GA5CGU,aCoBX0B,MAtBf,WACE,OACE,sBACExB,MAAO,CACLK,SAAU,QACVoB,MAAO,MACPC,OAAQ,OACRC,WAAY,gBALhB,UAQE,8HAIA,oDACqB,mBAAGC,KAAK,2BAAR,qBAErB,cAAC,EAAD,QChBNC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.87ae2948.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ScrollLoader extends Component {\n  constructor(props) {\n    super(props);\n    this.loaderEl = React.createRef();\n    this.prevRatio = 0;\n  }\n\n  componentDidMount() {\n    this.createObserver();\n  }\n\n  createObserver = () => {\n    let observer;\n    const options = {\n      root: this.props.containerEl || null, // null means document viewport\n      rootMargin: \"0px\",\n      threshold: 1,\n    };\n\n    observer = new IntersectionObserver(this.handleIntersect, options);\n    observer.observe(this.loaderEl.current);\n  };\n\n  handleIntersect = (entries) => {\n    // if no more data is available or api call is in progress then\n    // no need to perform any operation\n    if (this.props.isLoading || !this.props.hasMoreData) {\n      return;\n    }\n    entries.forEach((entry) => {\n      if (entry.intersectionRatio > this.prevRatio) {\n        // loaderEl is in view, perform load more data\n        this.props.onLoad();\n      }\n      this.prevRatio = entry.intersectionRatio;\n    });\n  };\n\n  render() {\n    return <div ref={this.loaderEl}></div>;\n  }\n}\n\nexport default ScrollLoader;\n","import React from \"react\";\n\nfunction PhotoView(props) {\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      <h3>{props.photo.title}</h3>\n      <img\n        loading=\"lazy\"\n        style={{ maxWidth: \"100%\" }}\n        src={props.photo.url}\n        alt=\"test\"\n      />\n    </div>\n  );\n}\nexport default PhotoView;\n","import React, { Component } from \"react\";\nimport ScrollLoader from \"../ScrollLoader\";\nimport axios from \"axios\";\nimport PhotoView from \"./PhotoView\";\nclass PhotoLoader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      page: 1,\n      photos: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getphotos();\n  }\n\n  getphotos = () => {\n    const page = this.state.page;\n    this.setState({ isLoading: true });\n    axios(`https://jsonplaceholder.typicode.com/photos?_limit=10&_page=${page}`)\n      .then((res) => {\n        this.setState({\n          isLoading: false,\n          photos: [...this.state.photos, ...res.data],\n          page: page + 1,\n        });\n      })\n      .catch((err) => {\n        this.setState({\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { isLoading, photos } = this.state;\n    // Add a bit bottom padding so that scrollLoder el get's in view at the end of the page\n    return (\n      <div style={{ paddingBottom: \"20px\" }}>\n        {photos.map((photo) => (\n          <PhotoView key={photo.id} photo={photo} />\n        ))}\n        {isLoading ? <h4>Loading...</h4> : null}\n        <ScrollLoader\n          isLoading={this.state.isLoading}\n          onLoad={this.getphotos}\n          hasMoreData={true}\n        />\n      </div>\n    );\n  }\n}\nexport default PhotoLoader;\n","import React from \"react\";\nimport PhotoLoader from \"./components/PhotoLoader\";\nfunction App() {\n  return (\n    <div\n      style={{\n        maxWidth: \"600px\",\n        width: \"95%\",\n        margin: \"auto\",\n        fontFamily: \"Noto Sans JP\",\n      }}\n    >\n      <h2>\n        This is minimal implementation of Infinite Loader using Intersection\n        Observer API in reactJS\n      </h2>\n      <p>\n        Read more about it <a href=\"https://gulamhussain.dev\">here</a>\n      </p>\n      <PhotoLoader />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}